From 5871c2ba33962ffdb09a000cf6510a98a8857366 Mon Sep 17 00:00:00 2001
From: captain <openatv@gmail.com>
Date: Sat, 25 Mar 2017 09:49:08 +0100
Subject: [PATCH] v3d-platform

---
 Makefile.in                                  |   8 +-
 configure.ac                                 | 113 ++++++++++++++-
 m4/xbmc_arch.m4                              |  16 +++
 project/cmake/scripts/linux/ArchSetup.cmake  |   6 +-
 tools/depends/configure.ac                   |  56 ++++++++
 tools/depends/target/ffmpeg/autobuild.sh     |  14 ++
 xbmc/addons/AddonManager.cpp                 |   6 +
 xbmc/platform/xbmc.cpp                       |   9 ++
 xbmc/system_gl.h                             |   3 +
 xbmc/utils/DreamboxUtils.cpp                 | 102 +++++++++++++
 xbmc/utils/DreamboxUtils.h                   |  24 ++++
 xbmc/utils/Makefile.in                       |   4 +
 xbmc/windowing/egl/EGLNativeTypeDreambox.cpp | 191 ++++++++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeDreambox.h   |  61 ++++++++
 xbmc/windowing/egl/EGLNativeTypeV3D.cpp      | 161 +++++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeV3D.h        |  59 ++++++++
 xbmc/windowing/egl/EGLNativeTypeV3DNXPL.cpp  | 208 +++++++++++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeV3DNXPL.h    | 129 +++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeVuplus.cpp   | 177 +++++++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeVuplus.h     |  60 ++++++++
 xbmc/windowing/egl/EGLWrapper.cpp            |  20 +++
 xbmc/windowing/egl/Makefile.in               |  12 ++
 22 files changed, 1430 insertions(+), 9 deletions(-)
 create mode 100644 xbmc/utils/DreamboxUtils.cpp
 create mode 100644 xbmc/utils/DreamboxUtils.h
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeDreambox.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeDreambox.h
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeV3D.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeV3D.h
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeV3DNXPL.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeV3DNXPL.h
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeVuplus.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeVuplus.h

diff --git a/Makefile.in b/Makefile.in
index 3c5de7c367..1ef8af4043 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -423,6 +423,12 @@ MAINOBJS+=xbmc/platform/darwin/osx/sdlmain.a
 endif
 endif # USE_ANDROID
 
+ifeq (@USE_VUPLUS@,1)
+VUPLUS_SUPPORT=$(shell cd ../xbmc-support; pwd)
+VUPLUS_EXTLIBS= xbmc/windowing/egl/gles_init.a -ldvb_base -lnxpl -ldvb_client -L$(VUPLUS_SUPPORT) -lxbmc_base
+else
+VUPLUS_EXTLIBS=${null}
+endif
 
 OBJSXBMC =$(DIRECTORY_ARCHIVES)
 OBJSXBMC:=$(filter-out $(DYNOBJSXBMC), $(OBJSXBMC))
@@ -450,7 +456,7 @@ endif
 ifeq ($(findstring osx,@ARCH@), osx)
 	$(SILENT_LD) $(CXX) $(LDFLAGS) -o @APP_NAME_LC@.bin $(MAINOBJS) -Wl,-all_load,-ObjC $(MAINOBJS) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(LIBS) -rdynamic
 else
-	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o @APP_NAME_LC@.bin $(MAINOBJS) -Wl,--start-group $(MAINOBJS) $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--end-group $(NWAOBJSXBMC) $(LIBS) -rdynamic
+	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o @APP_NAME_LC@.bin $(MAINOBJS) -Wl,--start-group $(MAINOBJS) $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--end-group $(NWAOBJSXBMC) $(LIBS) -rdynamic $(VUPLUS_EXTLIBS)
 endif
 
 @APP_NAME_LC@-xrandr: xbmc-xrandr.c
diff --git a/configure.ac b/configure.ac
index 9bd8d6ec09..a8555c89c8 100644
--- a/configure.ac
+++ b/configure.ac
@@ -681,6 +681,55 @@ case $use_platform in
      use_neon=yes
      use_cpu=cortex-a7
      ;;
+  dreambox-cortexa15)
+     USE_DREAMBOX=1
+     target_platform=target_v3d
+     target_videoplatform=target_dreambox
+     use_cpu=cortex-a15
+     ;;
+  dreambox-mipsel)
+     USE_DREAMBOX=1
+     target_platform=target_v3d
+     target_videoplatform=target_dreambox
+     use_neon=yes
+     use_gles=yes
+     use_sdl=no
+     ;;
+  vuplus-cortexa15)
+     USE_VUPLUS=1
+     target_platform=target_v3d
+     target_videoplatform=target_vuplus
+     use_cpu=cortex-a15
+     ;;
+  vuplus-mipsel)
+     USE_VUPLUS=1
+     target_platform=target_v3d
+     target_videoplatform=target_vuplus
+     use_neon=yes
+     use_gles=yes
+     use_sdl=no
+     ;;
+  v3d-cortexa15)
+     USE_V3DNXPL=1
+     target_platform=target_v3d
+     target_videoplatform=target_v3dnxpl
+     use_cpu=cortex-a15
+     ;;
+  v3d-mipsel)
+     USE_V3DNXPL=1
+     target_platform=target_v3d
+     target_videoplatform=target_v3dnxpl
+     use_neon=yes
+     use_gles=yes
+     use_sdl=no
+     ;;
+  xcore-mipsel)
+     USE_XCORE=1
+     target_platform=target_v3d
+     target_videoplatform=target_xcore
+     use_gles=yes
+     use_sdl=no
+     ;;
 esac
 
 if test "$target_platform" = "target_raspberry_pi" ; then
@@ -696,6 +745,13 @@ if test "$target_platform" = "target_raspberry_pi" ; then
      CXXFLAGS="$CXXFLAGS"
 fi
 
+if test "$target_platform" = "target_v3d" ; then
+     use_openmax=no
+     CORE_SYSTEM_NAME=linux
+     CFLAGS="$CFLAGS"
+     CXXFLAGS="$CXXFLAGS"
+fi
+
 if test "$host_vendor" = "apple"; then
   use_avahi=no
   use_alsa=no
@@ -819,6 +875,15 @@ elif test "$use_arch" = "arm"; then
       [ CFLAGS="$SAVE_CFLAGS -Wa,-march=armv6 -mtune=cortex-a8 -mthumb-interwork"
         CXXFLAGS="$CXXFLAGS -Wa,-march=armv6 -mtune=cortex-a8 -mthumb-interwork"
         use_cpu=cortex-a8])
+  elif test "$use_cpu" = "cortex-a15"; then
+    # Compile for ARMv7ve architecture
+    SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="-mfpu=neon-vfpv4"
+    AC_COMPILE_IFELSE(
+      [AC_LANG_SOURCE([int foo;])],
+      [ CFLAGS="$SAVE_CFLAGS -Wno-psabi -Wa,-march=armv7ve -mtune=cortex-a15 -mfpu=neon-vfpv4 -mvectorize-with-neon-quad"
+        CXXFLAGS="$CXXFLAGS -Wno-psabi -Wa,-march=armv7ve -mtune=cortex-a15 -mfpu=neon-vfpv4 -mvectorize-with-neon-quad"
+        use_cpu=cortex-a15])
   else
     if test "$use_neon" = "yes"; then
       CFLAGS="$CFLAGS -mfpu=neon -mvectorize-with-neon-quad"
@@ -912,6 +977,9 @@ if test "x$have_builtin_sync_val_compare_and_swap" = "xyes"; then
         [Define to 1 if your compiler supports the __sync_val_compare_and_swap() intrinsic.])
 fi
 
+# check if libatomic is available
+AC_CHECK_LIB([atomic], [__atomic_add_fetch_8], [LIBS="$LIBS -latomic"],)
+
 # Check for u16string/u32string declarations
 AC_LANG_PUSH([C++])
 AC_CHECK_TYPES([std::u16string, std::u32string], [], [], [[#include <string>]])
@@ -944,16 +1012,30 @@ if test "$use_gles" = "yes"; then
     AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
     AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
     AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
-  else
-    if test "$target_platform" = "target_raspberry_pi"; then
+  elif test "$target_platform" = "target_raspberry_pi"; then
       AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
       AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
       AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
       LIBS="$LIBS -lEGL -lGLESv2 -lbcm_host -lvcos -lvchiq_arm -lmmal -lmmal_core -lmmal_util -lvcsm"
-    else
+  elif test "$target_videoplatform" = "target_v3dnxpl" ; then
+      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+      AC_MSG_RESULT(== WARNING: OpenGLES v3dnxpl support is assumed.)
+      LIBS="$LIBS -lEGL -lGLESv2 -lnxpl -lnexus"
+  elif test "$target_videoplatform" = "target_vuplus" ; then
+      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+      AC_MSG_RESULT(== WARNING: OpenGLES vuplus support is assumed.)
+      LIBS="$LIBS -lEGL -lGLESv2"
+  elif test "$target_videoplatform" = "target_xcore" ; then
+      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+      AC_DEFINE(HAS_EGLGLES, [1], [Define if supporting EGL based GLES Framebuffer])
+      AC_MSG_RESULT(== WARNING: OpenGLES xcore support is assumed.)
+      LIBS="$LIBS -lEGL -lGLESv2 -lv3dplatform"
+  else
       AC_CHECK_LIB([EGL],   [main],, AC_MSG_ERROR($missing_library))
       AC_CHECK_LIB([GLESv2],[main],, AC_MSG_ERROR($missing_library))
-    fi
   fi
 else
   if test "$use_gl" = "yes"; then
@@ -1056,7 +1138,7 @@ int main() {
   )])
 AC_LANG_POP([C++])
 
-if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android"; then
+if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android" || test "${target_platform}" = "target_v3d"; then
   PKG_CHECK_MODULES([UUID], [uuid],, AC_MSG_ERROR(libuuid not found))
 fi
 
@@ -1556,7 +1638,14 @@ if test "${USE_STATIC_FFMPEG}" = "1"; then
       pkg_cfg_prefix=${SYSROOT}
   fi
 
-  if test "$cross_compiling" != "yes"; then
+  if test "$with_ffmpeg" = "905"; then
+    AC_MSG_NOTICE("FFmpeg installation forced by user - installing our version")
+    CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" NM="$NM" AR="$AR" \
+    AS="$AS" STRIP="$STRIP" CC="$CC" CXX="$CXX" LD="$CCLD" RANLIB="$RANLIB" \
+    ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS} ${PARALLEL_MAKE} --arch=generic
+    export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
+
+  elif test "$cross_compiling" != "yes"; then
     if test "$use_debug" != "yes"; then
       FFMPEG_OPTS="-r"
     fi
@@ -1611,11 +1700,17 @@ if test "$FFMPEG_FOUND" != "true"; then
   PKG_CHECK_MODULES([FFMPEG], [$FFMPEG_LIBNAMES],
     [INCLUDES="$INCLUDES $FFMPEG_CFLAGS"; LIBS="$LIBS $FFMPEG_LIBS"; FFMPEG_FOUND="true"],
     [AC_MSG_ERROR("ffmpeg not found")])
+    if test "$with_ffmpeg" = "905"; then
+      FFMPEG_LIBS=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --libs libavcodec 2>/dev/null)
+      FFMPEG_CFLAGS=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --cflags libavcodec 2>/dev/null)
+      INCLUDES="$INCLUDES $FFMPEG_CFLAGS"
+      LIBS="$LIBS $FFMPEG_LIBS"
+    fi
 fi
 
 if test "${USE_STATIC_FFMPEG}" = "1"; then
   # get the libdir for static linking
-  FFMPEG_LIBDIR=${pkg_cfg_prefix}$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
+  FFMPEG_LIBDIR=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
   GNUTLS_ALL_LIBS=$(${PKG_CONFIG} --static --libs-only-l --silence-errors gnutls)
 
   # check if static libs are available
@@ -2330,6 +2425,10 @@ AC_SUBST(HAVE_SSE4)
 AC_SUBST(USE_MMAL)
 AC_SUBST(USE_X11)
 AC_SUBST(USE_OPTICAL_DRIVE)
+AC_SUBST(USE_V3DNXPL)
+AC_SUBST(USE_DREAMBOX)
+AC_SUBST(USE_XCORE)
+AC_SUBST(USE_VUPLUS)
 
 # pushd and popd are not available in other shells besides bash, so implement
 # our own pushd/popd functions
diff --git a/m4/xbmc_arch.m4 b/m4/xbmc_arch.m4
index d28f263002..6b917d86e8 100644
--- a/m4/xbmc_arch.m4
+++ b/m4/xbmc_arch.m4
@@ -80,4 +80,20 @@ fi
 if test "$target_platform" = "target_raspberry_pi" ; then
   AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_ARMEL -DTARGET_RASPBERRY_PI")
 fi
+
+if test "$target_videoplatform" = "target_xcore" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_V3D -DTARGET_XCORE")
+fi
+
+if test "$target_videoplatform" = "target_v3dnxpl" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_V3D -DTARGET_V3DNXPL")
+fi
+
+if test "$target_videoplatform" = "target_dreambox" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_V3D -DTARGET_DREAMBOX")
+fi
+
+if test "$target_videoplatform" = "target_vuplus" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_V3D -DTARGET_VUPLUS")
+fi
 ])
diff --git a/project/cmake/scripts/linux/ArchSetup.cmake b/project/cmake/scripts/linux/ArchSetup.cmake
index c0cc1bf283..716c08cf01 100644
--- a/project/cmake/scripts/linux/ArchSetup.cmake
+++ b/project/cmake/scripts/linux/ArchSetup.cmake
@@ -13,7 +13,11 @@ else()
     set(ARCH i486-linux)
     set(NEON False)
     add_options(CXX ALL_BUILDS "-msse")
-  elseif(CPU MATCHES arm)
+  elseif(CPU MATCHES cortex-a15)
+    set(ARCH arm)
+    set(NEON True)
+    set(NEON_FLAGS "-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4 -mvectorize-with-neon-quad")
+  elseif(CPU MATCHES arm )
     set(ARCH arm)
     set(NEON True)
     set(NEON_FLAGS "-mfpu=neon -mvectorize-with-neon-quad")
diff --git a/tools/depends/configure.ac b/tools/depends/configure.ac
index 3626ea5204..1daf9ac3fd 100644
--- a/tools/depends/configure.ac
+++ b/tools/depends/configure.ac
@@ -408,6 +408,62 @@ case $use_platform in
      platform_cxxflags="-fPIC -mcpu=cortex-a7 -mfloat-abi=hard -mfpu=neon-vfpv4"
      platform_ldflags="-lpthread"
      ;;
+  v3d-mipsel)
+    use_cpu=$host_cpu
+    use_toolchain="${use_toolchain:-/usr}"
+    platform_cflags="-Os -fPIC -DPIC"
+    platform_ldflags="-Wl,-rpath-link=$prefix/$deps_dir/lib"
+    platform_cxxflags="$platform_cflags"
+    platform_os="linux"
+  ;;
+  xcore-mipsel)
+    use_cpu=$host_cpu
+    use_toolchain="${use_toolchain:-/usr}"
+    platform_cflags="-Os -fPIC -DPIC"
+    platform_ldflags="-Wl,-rpath-link=$prefix/$deps_dir/lib"
+    platform_cxxflags="$platform_cflags"
+    platform_os="linux"
+  ;;
+  v3d-cortexa15)
+     target_platform=v3d
+     use_neon=yes
+     use_cpu=cortex-a15
+     platform_cflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_cxxflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_ldflags="-lpthread"
+     ;;
+  dreambox-cortexa15)
+     target_platform=v3d
+     use_neon=yes
+     use_cpu=cortex-a15
+     platform_cflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_cxxflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_ldflags="-lpthread"
+     ;;
+  dreambox-mipsel)
+    use_cpu=$host_cpu
+    use_toolchain="${use_toolchain:-/usr}"
+    platform_cflags="-Os -fPIC -DPIC"
+    platform_ldflags="-Wl,-rpath-link=$prefix/$deps_dir/lib"
+    platform_cxxflags="$platform_cflags"
+    platform_os="linux"
+  ;;
+  vuplus-cortexa15)
+     target_platform=v3d
+     use_neon=yes
+     use_cpu=cortex-a15
+     platform_cflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_cxxflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_ldflags="-lpthread"
+     ;;
+  vuplus-mipsel)
+    use_cpu=$host_cpu
+    use_toolchain="${use_toolchain:-/usr}"
+    platform_cflags="-Os -fPIC -DPIC"
+    platform_ldflags="-Wl,-rpath-link=$prefix/$deps_dir/lib"
+    platform_cxxflags="$platform_cflags"
+    platform_os="linux"
+  ;;
 esac
 
 if test "$target_platform" = "raspberry-pi" ; then
diff --git a/tools/depends/target/ffmpeg/autobuild.sh b/tools/depends/target/ffmpeg/autobuild.sh
index 5c2976278e..a3e780617c 100755
--- a/tools/depends/target/ffmpeg/autobuild.sh
+++ b/tools/depends/target/ffmpeg/autobuild.sh
@@ -134,6 +134,20 @@ tar --strip-components=1 -xf $MYDIR/${ARCHIVE}
 
 CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" \
 ./configure --prefix=$FFMPEG_PREFIX \
+	--bindir="$FFMPEG_PREFIX/bin" \
+	--libdir="$FFMPEG_PREFIX/lib" \
+	--incdir="$FFMPEG_PREFIX/include" \
+	--pkgconfigdir="$FFMPEG_PREFIX/lib/pkgconfig" \
+	--target-os=linux \
+	--enable-cross-compile \
+	--nm="$NM" \
+	--ar="$AR" \
+	--as="$AS" \
+	--strip="$STRIP" \
+	--cc="$CC" \
+	--cxx="$CXX" \
+	--ld="$CCLD" \
+	--ranlib="$RANLIB" \
 	--extra-version="kodi-${VERSION}" \
 	--disable-devices \
 	--disable-ffplay \

